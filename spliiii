static size_t   counting_words(char const *s, char c)
{
    size_t  words;
    size_t  i;
    words = 0;
    i = 0;
    while (s[i] != 0)
    {
        if (s[i] != c)
        {
            words++;
            while (s[i] && s[i] != c)
                i++;
        }
        else if (s[i] == c)
            i++;
    }
    return (words);
}
static size_t   wordslen(char const *s, char c)
{
    size_t  i;
    i = 0;
    while (s[i] && s[i] != c)
        i++;
    return (i);
}
static void free_array(char **array, size_t i)
{
    while (i > 0)
    {
        i--;
        free(array[i]);
    }
    free (array);
}
static char **copystr(char const *s, char c, char **array, size_t words)
{
    size_t  i;
    size_t  j;
    i = 0;
    j = 0;
    while (i < words)
    {
        while (s[j] && s[j] == c)
            j++;
        array[i] = ft_substr(s, j, wordslen(&s[j], c));
        if (!array[i])
        {
            free_array(array, i);
            return (NULL);
        }
        while (s[j] && s[j] != c)
            j++;
        i++;
    }
    array[i] = NULL;
    return (array);
}
char    **ft_split(char const *s, char c)
{
    char    **array;
    size_t  words;
    if (!s)
        return (NULL);
    words = counting_words(s, c);
    array = (char **)ft_calloc(words + 1, sizeof(char **));
    if (!s || !array)
        return (NULL);
    array = copystr(s, c, array, words);
    return (array);
}


-----------------------------------------------------

static int		ft_count(int n)
{
	unsigned int	nbr;
	int				i;

	i = 1;
	if (n < 0)
	{
		nbr = -n;
		i++;
	}
	else
		nbr = n;
	while (nbr / 10 > 0)
	{
		i++;
		nbr = nbr / 10;
	}
	return (i);
}

char			*ft_itoa(int n)
{
	size_t			size;
	unsigned int	nb;
	char			*str;

	nb = n;
	size = ft_count(n);
	if (!(str = (char *)malloc(sizeof(char) * (size + 1))))
		return (NULL);
	if (n == 0)
	{
		str[0] = '0';
		str[1] = '\0';
	}
	if (n < 0)
	{
		nb = -n;
		*str = '-';
	}
	str[size--] = '\0';
	while (nb != 0)
	{
		str[size--] = (nb % 10) + '0';
		nb = nb / 10;
	}
	return (str);
}











